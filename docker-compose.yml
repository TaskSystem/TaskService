services:

  postgres:
    image: postgres:16.2
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - app-network

  postgres_board:
    image: postgres:16.2
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgresadmin
      POSTGRES_DB: boardservice
    ports:
      - "5433:5432"
    volumes:
      - postgres_board_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 15

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.6
    command: start
    environment:
      KC_HOSTNAME: keycloak
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres/${POSTGRES_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - 8080:8080
    restart: always
    depends_on:
      - postgres
    volumes:
      - keycloak_data:/opt/keycloak/data
    networks:
      - app-network

  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "5672:5672"     # RabbitMQ protocol
      - "15672:15672"   # RabbitMQ Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672/api/health"]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./bearertoken.txt:/etc/prometheus/bearertoken.txt  # Mount de bearertoken.txt in de container
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - app-network

  userservice:
    build:
      context: ./UserService
      dockerfile: Dockerfile
    ports:
      - "5002:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - KEYCLOAK_AUTH_SERVER_URL=http://keycloak:8080
    depends_on:
      - keycloak
    networks:
      - app-network

  taskservice:
    build:
      context: ./TaskSystem
      dockerfile: TaskService/Dockerfile
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - KEYCLOAK_AUTH_SERVER_URL=http://keycloak:8080
    depends_on:
      - rabbitmq
    networks:
      - app-network

  boardservice:
    build:
      context: ./BoardService/BoardService
      dockerfile: Dockerfile
    ports:
      - "5001:8080"
    depends_on:
      postgres_board:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres_board;Port=5432;Database=boardservice;Username=postgres;Password=postgresadmin
    networks:
      - app-network

  notificationservice:
    build:
      context: ./NotificationService/NotificationService
      dockerfile: Dockerfile
    ports:
      - "5004:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    depends_on:
      - rabbitmq
    networks:
      - app-network

  gateway:
    build:
      context: ./Gateway/Gateway
      dockerfile: Dockerfile
    ports:
      - "5005:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - app-network

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml

volumes:
  postgres_data: {}   # Volume voor PostgreSQL
  postgres_board_data: {}
  keycloak_data: {}   # Volume voor Keycloak
  rabbitmq_data: {}   # Volume voor RabbitMQ

networks:
  app-network:
    driver: bridge
