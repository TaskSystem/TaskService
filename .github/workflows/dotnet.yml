name: .NET CI/CD with SonarCloud

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout de code
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@<action version> # Ex: v2.1.0, See the latest version at https://github.com/marketplace/actions/sonarcloud-scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Restore dependencies voor alle services
      - name: Restore dependencies for TaskService
        run: dotnet restore TaskSystem/TaskService.sln

      - name: Restore dependencies for UserService
        run: dotnet restore UserService/UserService.sln

      - name: Restore dependencies for NotificationService
        run: dotnet restore NotificationService/NotificationService.sln

      # Build alle services
      - name: Build TaskService
        run: dotnet build TaskSystem/TaskService.sln --no-restore

      - name: Build UserService
        run: dotnet build UserService/UserService.sln --no-restore

      - name: Build NotificationService
        run: dotnet build NotificationService/NotificationService.sln --no-restore

  test:
    runs-on: ubuntu-latest
    needs: build  # Zorg ervoor dat de 'build' job succesvol is voordat deze wordt uitgevoerd
    steps:
      # Checkout de code
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Test de services
      - name: Test TaskService
        run: dotnet test TaskSystem/TaskService.sln --no-build --verbosity normal

      - name: Test UserService
        run: dotnet test UserService/UserService.sln --no-build --verbosity normal

      - name: Test NotificationService
        run: dotnet test NotificationService/NotificationService.sln --no-build --verbosity normal

  docker_push:
    runs-on: ubuntu-latest
    needs: test  # Zorg ervoor dat de 'test' job succesvol is voordat deze wordt uitgevoerd
    steps:
      # Checkout de code
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Log in bij Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build Docker images
      - name: Build Docker image for TaskService
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/taskservice-taskservice:latest \
          -f TaskSystem/TaskService/Dockerfile TaskSystem/

      - name: Build Docker image for UserService
        run: |
          docker build -t zakaria469980/taskservice-userservice:latest ./UserService/UserService

      - name: Build Docker image for NotificationService
        run: |
          docker build -t zakaria469980/taskservice-notificationservice:latest ./NotificationService/NotificationService

      

      - name: Push RabbitMQ image to Docker Hub
        run: |
          docker pull rabbitmq:3-management
          docker tag rabbitmq:3-management zakaria469980/rabbitmq-custom:latest
          docker push zakaria469980/rabbitmq-custom:latest

      # Push Docker images naar Docker Hub
      - name: Push Docker images to Docker Hub
        run: |
          docker push zakaria469980/taskservice-taskservice:latest
          docker push zakaria469980/taskservice-userservice:latest
          docker push zakaria469980/taskservice-notificationservice:latest

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/dotnet@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
          args: --sarif-file-output=snyk.sarif
      - name: Print Snyk Sarif File
        run: cat snyk.sarif
